<?php

namespace Charlotte\StaffBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Charlotte\StaffBundle\Entity\Staff as User;
/**
 * Staff
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Staff extends EntityRepository
{
    /**
     * Retourne les rôles de l'utilisateur
     * @return results
     */
    public function findAllRoles(User $staff)
    {
        //Je garde l'AV, on sait jamais
        // $roles = array();
        // $allroles = array();

        // global $kernel;

        // if ('AppCache' == get_class($kernel)) {
        //     $kernel = $kernel->getKernel();
        // }

        // $service = $kernel->getContainer()->get('charlotte_staff.rolesdescription');

        // $rolesdescription = $service->allDescription();

        // foreach ($this->getGroups() as $team) {
        //     $roles = array_merge($roles, (array)$team->getRoles());
        // }
        // $roles = array_merge($roles, (array)$this->getRoles());

        // $roles = array_values(array_unique($roles));

        // foreach ($roles as $role) {

        //     $explode = explode('_', $role);

        //     if(isset($explode[1]) && isset($explode[2]) && isset($explode[3])) {
        //         $type = $explode[1];
        //         $key = $explode[2];
        //         $value = $explode[3];

        //         if(isset($allroles[$type]) && array_key_exists($key, $allroles[$type])) {
        //             if($value > $allroles[$type][$key]) {
        //                 $allroles[$type][$key]['value'] = $value;
        //                 $allroles[$type][$key]['comment'] = $rolesdescription['ROLE_'.$type.'_'.$key];
        //             }
        //         }
        //         else {
        //             $allroles[$type][$key]['value'] = $value;
        //             $allroles[$type][$key]['comment'] = $rolesdescription['ROLE_'.$type.'_'.$key];
        //         }
        //     }
        // }

        // uksort($allroles, "strnatcasecmp");

        // return $allroles;

        $roles = array();
        $allroles = array();

        $rolesdescription = $this->getEntityManager()->getRepository('CharlotteStaffBundle:Rolesdescription')->findAllDescription();

        foreach ($staff->getGroups() as $team) {
            $roles = array_merge($roles, (array)$team->getRoles());
        }
        $roles = array_merge($roles, (array)$staff->getRoles());

        $roles = array_values(array_unique($roles));

        foreach ($roles as $role) {

            $explode = explode('_', $role);

            if(isset($explode[1]) && isset($explode[2]) && isset($explode[3])) {
                $type = $explode[1];
                $key = $explode[2];
                $value = $explode[3];

                if(isset($allroles[$type]) && array_key_exists($key, $allroles[$type])) {
                    if($value > $allroles[$type][$key]) {
                        $allroles[$type][$key]['value'] = $value;
                        $allroles[$type][$key]['comment'] = $rolesdescription['ROLE_'.$type.'_'.$key];
                    }
                }
                else {
                    $allroles[$type][$key]['value'] = $value;
                    $allroles[$type][$key]['comment'] = $rolesdescription['ROLE_'.$type.'_'.$key];
                }
            }
        }

        uksort($allroles, "strnatcasecmp");

        return $allroles;
    }

    /**
     * Retourne un utilisateur par rapport a un rôle présent uniquement dans la table staff (donc spécifique à l'utilisateur)
     * @param string $role
     *
     * @return array
     */
    public function findByUserRole($role)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%'.$role.'%');

        return $qb->getQuery()->getResult();
    }

    /**
     * Retourne un utilisateur par rapport à un rôle présent depuis son groupe ou spécifique à l'utilisateur
     * @param string $role
     *
     * @return array
     */
    public function findByRole($role)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->leftJoin('u.groups', 'g')
            ->where($qb->expr()->orX(
                $qb->expr()->like('u.roles', ':roles'),
                $qb->expr()->like('g.roles', ':roles')
            ))
            ->setParameter('roles', '%'.$role.'%');

        return $qb->getQuery()->getResult();
    }

}
